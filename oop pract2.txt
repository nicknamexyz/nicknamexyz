/*
Develop a program in C++ to create a database of studentâ€™s information system containing the following information: Name, Roll number, Class, Division, Date of Birth, Blood group, Contact address, Telephone number, Driving license no. and other. Construct the database with suitable member functions. Make use of constructor, default constructor, copy constructor,
 destructor, static member functions, friend class, exception handling.


 Theory:
 Constructor:
 A special method of the class that will be automatically invoked when an instance of the class is
 created  is  called  as  constructor.  Following  are  the
 most useful features of constructor.
 1) Constructor is used for Initializing the values to the data members of the Class.
 2) Constructor is that whose name is same as name of class.
 3) Constructor gets Automatically called when an object of class is created.
 4) Constructors never have a Return Type even void.
 5) Constructor is of Default, Parameterized and Copy 
Constructors. The various types of Constructor are as follows:
Constructors can be classified into 3 types
 1. Default Constructor
 2. Parameterized Constructor
 3. Copy Constructor

 Static members
 A class can contain static members, either data or functions.
 Static data members of a class are also known as "class variables", because there is only one unique
 value for all the objects of that same class

friend function
A friend function is a function that isn't a member of a class but has access to the class's private and protected members. Friend functions aren't considered class members.
Pointers:
 A pointer is a derived data type that refers to another data variable by storing the variables memory
 address rather than data.
 Declaration of pointer variable is in the following form :
 Data_type * ptr_var;

*/



#include<iostream>
#include<string.h>
using namespace std;

class StudData;

class Student{
    string name;
    int roll_no;
    string cls;
    char* division;
    string dob;
    char* bloodgroup;
    static int count;

    public:

    Student()          // Default Constructor
    {
        name="";
        roll_no=0;
        cls="";
        division=new char;
        dob="dd/mm/yyyy";
        bloodgroup=new char[4];
    }

    ~Student()
    {
        delete division;
        delete[] bloodgroup;
    }

    static int getCount()
    {
        return count;
    }

    void getData(StudData*);
    void dispData(StudData*);
};

class StudData{
    string caddress;
    long int* telno;
    long int* dlno;
    friend class Student;

    public:

    StudData()
    {
        caddress="";
        telno=new long;
        dlno=new long;
    }
    
    ~StudData()
    {
        delete telno;
        delete dlno;
    }

    void getStudData()
    {
        cout<<"Enter Contact Address : ";
        cin.get();
        getline(cin,caddress);
        cout<<"Enter Telephone Number : ";
        cin>>*telno;
        cout<<"Enter Driving License Number : ";
        cin>>*dlno;
    }

    void dispStudData()
    {
        cout<<"Contact Address : "<<caddress<<endl;
        cout<<"Telephone Number : "<<*telno<<endl;
        cout<<"Driving License Number : "<<*dlno<<endl;
    }
};

inline void Student::getData(StudData* st)
{
    cout<<"Enter Student Name : ";
    getline(cin,name);
    cout<<"Enter Roll Number : ";
    cin>>roll_no;
    cout<<"Enter Class : ";
    cin.get();
    getline(cin,cls);
    cout<<"Enter Division : ";
    cin>>division;
    cout<<"Enter Date of Birth : ";
    cin.get();
    getline(cin,dob);
    cout<<"Enter Blood Group : ";
    cin>>bloodgroup;
    st->getStudData();
    count++;
}

inline void Student::dispData(StudData* st1)
{
    cout<<"Student Name : "<<name<<endl;
    cout<<"Roll Number : "<<roll_no<<endl;
    cout<<"Class : "<<cls<<endl;
    cout<<"Division : "<<division<<endl;
    cout<<"Date of Birth : "<<dob<<endl;
    cout<<"Blood Group : "<<bloodgroup<<endl;
    st1->dispStudData();
}

int Student::count;

int main()
{
    Student* stud1[100];
    StudData* stud2[100];
    int n=0;
    char ch;

    do
    {
        stud1[n]=new Student;
        stud2[n]=new StudData;
        stud1[n]->getData(stud2[n]);
        n++;
        cout<<"Do you want to add another student (y/n) : ";
        cin>>ch;
        cin.get();
    } while (ch=='y' || ch=='Y');

    for(int i=0;i<n;i++)
    {
        cout<<"---------------------------------------------------------------"<<endl;
        stud1[i]->dispData(stud2[i]);
    }

    cout<<"---------------------------------------------------------------"<<endl;
    cout<<"Total Students : "<<Student::getCount();
    cout<<endl<<"---------------------------------------------------------------"<<endl;

    for(int i=0;i<n;i++)
    {
        delete stud1[i];
        delete stud2[i];
    }
    

    return 0;
}




/*-------------------------------------------output-------------------------------------------------
Enter Student Name : shreya 
Enter Roll Number : 71 
Enter Class : SE 
Enter Division : C 
Enter Date of Birth : 31/03/2005 
Enter Blood Group : O+ 
Enter Contact Address : Buldana 
Enter Telephone Number : 9876546789 
Enter Driving License Number : Do you want to add another student (y/n) : --------------------------------------------------------------- 
Student Name : shreya 
Roll Number : 71 
Class : SE 
Division : C 
Date of Birth : 31/03/2005 
Blood Group : O+ 
Contact Address : Buldana 
Telephone Number : 2147483647 
Driving License Number : 1348221507 --------------------------------------------------------------- 
Total Students : 1 --------------------------------------------------------------- -------------------------------- 
Process exited after 36.52 seconds with return value 0 
Press any key to continue . . */