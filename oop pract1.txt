#include <iostream>
using namespace std;

class Complex {
private:
    double real;
    double imag;

public:
    // Default constructor (creates 0 + 0i)
    Complex() : real(0), imag(0) {}

    // Parameterized constructor to initialize with real and imaginary parts
    Complex(double r, double i) : real(r), imag(i) {}

    // Overload + operator to add two complex numbers
    Complex operator + (const Complex& other) {
        return Complex(real + other.real, imag + other.imag);
    }

    // Overload * operator to multiply two complex numbers
    Complex operator * (const Complex& other) {
        double r = real * other.real - imag * other.imag;
        double i = real * other.imag + imag * other.real;
        return Complex(r, i);
    }

    // Overload >> operator to read a complex number
    friend istream& operator >> (istream& in, Complex& c) {
        cout << "Enter real part: ";
        in >> c.real;
        cout << "Enter imaginary part: ";
        in >> c.imag;
        return in;
    }

    // Overload << operator to print a complex number
    friend ostream& operator << (ostream& out, const Complex& c) {
        out << c.real;
        if (c.imag >= 0) out << " + " << c.imag << "i";
        else out << " - " << -c.imag << "i";
        return out;
    }
};

int main() {
    Complex c1, c2, result;

    // Read complex numbers using >> operator
    cout << "Enter the first complex number:" << endl;
    cin >> c1;
    cout << "Enter the second complex number:" << endl;
    cin >> c2;

    // Add complex numbers
    result = c1 + c2;
    cout << "Sum: " << result << endl;

    // Multiply complex numbers
    result = c1 * c2;
    cout << "Product: " << result << endl;

    return 0;
}






-------------------------------------------------------------------------------------------------------------------------------------------------------
Title: Implement a class Complex which represents the Complex Number data type. Implement the following
Constructor (including a default constructor which creates the complex number 0+0i).
Overload operator+ to add two complex numbers.
Overload operator* to multiply two complex numbers.
Overload operators << and >> to print and read Complex Numbers.
 
 Objectives:
 To learn the concept of constructor, default constructor, operator overloading using member function
 and friend function.

 Theory:
       Operator Overloading
 It is a specific case of polymorphism where different operators have different implementations
 depending on their arguments. In C++ the overloading principle applies not only to functions, but to
 operators too. That is, of operators can be extended to work not just with built-in types but also
 classes. A programmer can provide his or her own operator to a class by overloading the built-in
 operator to perform some specific computation when the operator is used on objects of that class.

 An Example of Operator Overloading
 Complex a(1.2,1.3); 
 Complex b(2.1,3); 
 Complex c=a+b;
 
 Arithmetic Operators
 Arithmetic Operators are used to do basic arithmetic operations like addition, subtraction,
 multiplication, division, and modulus.
 
  Here is a list of all the operators that can be overloaded:
 Over loadable operators
 +- * / = <> +=-= *= /= <<>>
 <<=  >>=  ==   !=   <=   >=   ++ --   %
 & ^ ! 